name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (semantic, e.g. 1.2.3)"
        required: true
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Setup Node
        if: ${{ hashFiles('package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install
        run: |
          if [ -f package.json ]; then npm ci; fi
          pip install requests || true

      - name: Build
        run: |
          if [ -f package.json ] && npm run | grep -q "build"; then npm run build; fi

      - name: Test
        run: |
          if [ -f package.json ]; then npm test -- --ci; \
          elif [ -f test_events.py ]; then python -m unittest test_events.py -v; fi

      - name: Compute version (dispatch path)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: version_input
        run: echo "VERSION=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"

      - name: Get version (tag path)
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        id: version_tag
        run: echo "VERSION=${GITHUB_REF##*/v}" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_input.outputs.VERSION || steps.version_tag.outputs.VERSION }}
          name: Release v${{ steps.version_input.outputs.VERSION || steps.version_tag.outputs.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Uncomment to publish to npm if needed
      # - name: Publish to npm
      #   if: ${{ steps.version_input.outputs.VERSION || steps.version_tag.outputs.VERSION }}
      #   run: |
      #     npm version ${{ steps.version_input.outputs.VERSION || steps.version_tag.outputs.VERSION }} --no-git-tag-version
      #     npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}